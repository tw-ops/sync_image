name: sync_image

on:
  issues:
    types: [opened, edited]
  label:
    types: [created]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  sync:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'porter')

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 QEMU 环境
        uses: docker/setup-qemu-action@v3

      - name: 设置 Buildx 环境
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.9.3        

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 确定镜像标签
        id: image-tag
        run: |
          # 使用 latest 标签
          echo "tag=latest" >> $GITHUB_OUTPUT

      - name: 拉取同步镜像
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"
          echo "使用镜像: $IMAGE"
          docker pull $IMAGE

      - name: 运行镜像同步
        env:
          AK: ${{ secrets.HW_AK }}
          SK: ${{ secrets.HW_SK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"

          echo "使用镜像: $IMAGE"
          echo "配置信息:"
          echo "  GitHub User: ${GITHUB_USER}"
          echo "  GitHub Repo: ${GITHUB_REPO}"
          echo "  GitHub Run ID: ${GITHUB_RUN_ID}"
          echo "  Docker Registry: ${DOCKER_REGISTRY}"
          echo "  Docker Namespace: ${DOCKER_NAMESPACE}"

          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e AK="${AK}" \
            -e SK="${SK}" \
            -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
            -e GITHUB_USER="${GITHUB_USER}" \
            -e GITHUB_REPO="${GITHUB_REPO}" \
            -e GITHUB_RUN_ID="${GITHUB_RUN_ID}" \
            -e DOCKER_REGISTRY="${DOCKER_REGISTRY}" \
            -e DOCKER_NAMESPACE="${DOCKER_NAMESPACE}" \
            -e DOCKER_USER="${DOCKER_USER}" \
            -e DOCKER_PASSWORD="${DOCKER_PASSWORD}" \
            $IMAGE \
            --config=/app/configs/rules.yaml

  auto_close_issues:
    runs-on: ubuntu-latest
    steps:
      - name: check issues
        id: check_issues
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: | 
            const openIssues = await github.issues.listForRepo({
                  owner: '${{ github.repository_owner }}',
                  repo: '${{ github.event.repository.name }}',
                  state: 'open',
                  per_page: 100,
                  sort: "created",
                  direction: "desc",
            })
            
            if (!Array.isArray(openIssues["data"]) || !openIssues["data"].length) {
              core.setOutput('SUCCESS', true)
              return
            }
            let validLabels=false
            for(let issues of openIssues['data']){
                for(let labels of issues["labels"]){
                  if(labels["name"]=="porter" || labels["name"]=="question"){
                    validLabels=true
                  }
                }
                if(validLabels){
                  continue
                }
                await  github.issues.createComment({
                  owner: '${{ github.repository_owner }}',
                  repo: '${{ github.event.repository.name }}',
                  issue_number: issues["number"],
                  body: "@"+issues["user"]["login"]+" 不是说了嘛，通过模板创建 issues，请通过[此模板](https://github.com/tw-ops/sync_image/issues/new?assignees=&labels=porter&template=porter.md&title=%5BPORTER%5D)重新创建，此 issues 将自动关闭"
                });
                await github.issues.addLabels({
                  owner: '${{ github.repository_owner }}',
                  repo: '${{ github.event.repository.name }}',
                  issue_number: issues["number"],
                  labels: ["rude"]
                });
              await github.issues.update({
                owner: '${{ github.repository_owner }}',
                repo: '${{ github.event.repository.name }}',
                issue_number: issues["number"],
                state: 'closed'
                })
            }
