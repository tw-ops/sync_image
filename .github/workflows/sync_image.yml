name: sync_image

on:
  issues:
    types: [opened, edited]
  label:
    types: [created]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  sync:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'porter')

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 QEMU 环境
        uses: docker/setup-qemu-action@v3

      - name: 设置 Buildx 环境
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 确定镜像标签
        id: image-tag
        run: |
          # 使用 latest 标签
          echo "tag=latest" >> $GITHUB_OUTPUT

      - name: 拉取同步镜像
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"
          echo "使用镜像: $IMAGE"
          docker pull $IMAGE

      - name: 运行镜像同步
        env:
          AK: ${{ secrets.HW_AK }}
          SK: ${{ secrets.HW_SK }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"

          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e AK="${AK}" \
            -e SK="${SK}" \
            $IMAGE \
            --config=configs/rules.yaml \
            --github.token=${{ secrets.GITHUB_TOKEN }} \
            --github.user=${{ github.repository_owner }} \
            --github.repo=${{ github.event.repository.name }} \
            --docker.registry=${{ secrets.DOCKER_REGISTRY }} \
            --docker.namespace=${{ secrets.DOCKER_NAMESPACE }} \
            --docker.user=${{ secrets.DOCKER_USER }} \
            --docker.secret=${{ secrets.DOCKER_PASSWORD }} \
            --github.run_id=${{ github.run_id }}

  auto_close_issues:
    runs-on: ubuntu-latest
    steps:
      - name: check issues
        id: check_issues
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: | 
            const openIssues = await github.issues.listForRepo({
                  owner: '${{ github.repository_owner }}',
                  repo: '${{ github.event.repository.name }}',
                  state: 'open',
                  per_page: 100,
                  sort: "created",
                  direction: "desc",
            })
            
            if (!Array.isArray(openIssues["data"]) || !openIssues["data"].length) {
              core.setOutput('SUCCESS', true)
              return
            }
            let validLabels=false
            for(let issues of openIssues['data']){
                for(let labels of issues["labels"]){
                  if(labels["name"]=="porter" || labels["name"]=="question"){
                    validLabels=true
                  }
                }
                if(validLabels){
                  continue
                }
                await  github.issues.createComment({
                  owner: '${{ github.repository_owner }}',
                  repo: '${{ github.event.repository.name }}',
                  issue_number: issues["number"],
                  body: "@"+issues["user"]["login"]+" 不是说了嘛，通过模板创建 issues，请通过[此模板](https://github.com/tw-ops/sync_image/issues/new?assignees=&labels=porter&template=porter.md&title=%5BPORTER%5D)重新创建，此 issues 将自动关闭"
                });
                await github.issues.addLabels({
                  owner: '${{ github.repository_owner }}',
                  repo: '${{ github.event.repository.name }}',
                  issue_number: issues["number"],
                  labels: ["rude"]
                });
              await github.issues.update({
                owner: '${{ github.repository_owner }}',
                repo: '${{ github.event.repository.name }}',
                issue_number: issues["number"],
                state: 'closed'
                })
            }
