# GitHub Actions 专用 Dockerfile
# 第一阶段：构建阶段
FROM golang:1.21-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装必要的工具
RUN apk add --no-cache git ca-certificates tzdata make

# 复制 go mod 文件
COPY go.mod go.sum ./

# 下载依赖
RUN go mod download

# 复制源代码
COPY . .

# 构建应用程序
ARG VERSION=dev
ARG COMMIT=unknown
ARG BUILD_TIME=unknown
RUN make build VERSION=${VERSION} COMMIT=${COMMIT} BUILD_TIME=${BUILD_TIME}

# 第二阶段：运行阶段 - 使用最新的 Ubuntu 24.04 LTS
FROM ubuntu:24.04

# 安装必要的工具
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    bash \
    && rm -rf /var/lib/apt/lists/*

# 安装 Docker
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-buildx-plugin \
    && rm -rf /var/lib/apt/lists/*

# 设置工作目录
WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/build/sync-image ./sync-image

# 复制配置文件
COPY --from=builder /app/configs ./configs

# 复制脚本文件
COPY --from=builder /app/scripts ./scripts

# 设置脚本执行权限
RUN chmod +x scripts/pull-k8s-image.sh scripts/entrypoint.sh

# 设置环境变量
ENV DOCKER_BUILDKIT=1
ENV DOCKER_CLI_EXPERIMENTAL=enabled

# 确保 /tmp/.buildx 目录存在并有正确权限
RUN mkdir -p /tmp/.buildx && chmod 755 /tmp/.buildx

# 设置入口点（以 root 用户运行）
ENTRYPOINT ["./sync-image"]

# 默认命令参数
CMD ["--help"]
